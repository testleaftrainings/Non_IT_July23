
Recap:
Automation
Java
-----
High level lag
easy to integrated
lot of lib
Motherhood
very good in market
oops

.java convert .class

JDK-->JRE JVM

IDE-Eclipse
open source


Project(upper case)
package-->lower case
class
syntax:

public class ClassName(uppercase){

}

Object:
-------

variables
Method


syntax:

ClassName object =new ClassName();


Method:
function block code action/verifi


syntax:

public void methodName(){

}


main--->entry point

public static void main(String[] args){


}

variables:
data/information

Data type
---------
primitive
whole number
byte
int
short
long
float
double
char
boolean
Non primitive
String 
Arrays
class



Method signature
--------------------
1.access modifier---permission
   a.public----Anyone can access(public transport)
   b.private---Members of my class(with in same class)
   c.protected---only can be access from same package(week3)
   d.default----only can be access from same package

2.return type
------------
void
Primitive and Non Primitive data type

The return statement can be used in two ways:
----------------------------------------------

Returning a value: When a method has a return type
(other than void), the return statement is used to return a value of that type. 



Exiting a method: When a method does not have a returntype(i.e., it returns void)
the return statement is used to exit the method.

public void printNumbers(int n) {
    for (int i = 1; i <= n; i++) {
        System.out.println(i);
        if (i == 5) {
            return;
        }
    }
}
3.methodName
--------------
--->it should be meaningful
--->Lowercase following uppercase
ex:driveCar();

4.Input argument
------------------
It is the data needed for the method to work
It can be no arguments, single or multiple arguments
It can be primitive and non primitive and mix of both











input, data operator  add +


Operators:
operators are special symbols that perform specific operations
 
1.Arithmetic operators:
These operators are used to perform mathematical operations
such as addition, subtraction, multiplication,and division.
+ (addition)
- (subtraction)
* (multiplication)
/ (division)-Quotient
% (modulus or remainder)

2.Assignment operators:
These operators are used to assign values to variables. 
= (assignment)
+= (add and assign)
-= (subtract and assign)
*= (multiply and assign)
/= (divide and assign)
%= (modulus and assign)

3.Comparison operators:
These operators are used to compare two value
and return a boolean value (true or false). 
== (equal to)
!= (not equal to)
> (greater than)
< (less than)
>= (greater than or equal to)
<= (less than or equal to)

4.Logical operators:
These operators are used to combine two or more boolean expressions
and return a boolean value.

&& (logical and) 

AND----->&&
multiple
1*0=0     T F F
0*1=0     F T F
0*0=0     F F F
1*1=1     T T T

(5==5)&&(5<5)---false

|| (logical or)
addition
OR------>||
1+0=1    T F T
0+1=1    F T T
1+1=1    T T T
0+0=0    F F F
(5==5)||(5<5)---True
! (logical not or negation)
1---0   T F

0---1   F  T
boolean flag=false;
!flag

5. unary operator
Increment operator (++) 
+1
Decrement operator (--)

-1

Control Statements:

They allow you to determine the order in which statements
are executed based on certain conditions or repetitions.

Java provides several types of control statements:

Conditional Statements:(Selection)
------------------------
if statement: It executes a block of code if a specified condition is true.

if-else statement: It executes one block of code if a specified condition
is true and another block if it is false.

nested if-else statement: It allows you to have an if-else statement
inside another if-else statement.

Looping Statements:(Iteration)
-------------------
for loop: It repeats a block of code a specified number of times.

syntax:

for(dec/initialization;condition;incre/decre){
    body of statement
}



for(int i=0;i<=5;i++ ){

}


while loop: It repeatedly executes a block of code as long as a specified condition is true.


do-while loop: It executes a block of code once 
and then repeatedly executes it as long as a specified condition is true.
For Loop:
---------
fixed number of time 

syntax:
--------
for(initialization;condition;incre/decre){
//body of the statement
}
for(int i=0;i<=5;i++){
syso(i)
}

While
------
while(condition){
}


ClassRoom:
Create a class
Create main method
add simple for loop 
To print 10 numbers
print your name also


odd number 1-20

for()
if()
i%2!=0
1%2==0   !=0  1

2%2==0   !=0

3%2==0 !=0    3


fact 5
1*2*3*4*5=120

int input=5;
for

ump Statements:

break statement: It terminates the current loop or switch statement
and transfers control to the statement immediately following it.

continue statement: It skips the rest of the current iteration 
of a loop and proceeds to the next iteration.


